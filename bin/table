#!/usr/bin/env python

import re

import dominate
import pymongo
from dominate.tags import body, caption, link, table, tbody, td, th, tr
from dominate.util import raw


def green(x):
    return '<span style="color: green;">{}</span>'.format(x)

def red(x):
    return '<span style="color: red;">{}</span>'.format(x)

def passed():
    return green('&#10004;')

def failed():
    return red('&#10060;')

# pylint: disable=C0103
client = pymongo.MongoClient('mongodb://localhost:27017')
database = client.get_database('card-analysis')

commands = database.commands

doc = dominate.document(title='Test table')
with doc.head:
    link(rel='stylesheet', href='stylesheet.css')

body = doc.add(body())
table = body.add(table())
tbody = table.add(tbody())

ATTACK_NAME = 'StackUnderflow'

# stages = commands.find({'attack-id': last_attack_id})
CARD_NAME = 'card-name'
INSTALL = 'installation'
READ = 'send INS_READ'
UNINSTALL = 'uninstallation'

columns = [CARD_NAME, INSTALL, READ, UNINSTALL]

def get_install_result(obj):
    if obj['returncode'] == 0:
        return raw(passed())
    return raw(failed())

def get_uninstall_result(obj):
    if obj['returncode'] == 0:
        return raw(passed())
    return raw(failed())

def get_read_result(obj):
    # rex = re.compile(r'(A>>.*A0B00000 00.*\nA<<\s*\(.*\)\s+(.*))', re.MULTILINE)
    # read one line after the INS_READ is sent
    rex = re.compile(r'(A>>.*A0B00000 00.*\n.*)', re.MULTILINE)
    output = rex.search(obj['stdout'])
    if output:
        out = output.group()
        out = out.replace('\n', '</br>')
        if obj['returncode'] == 0:
            ret = passed() + '</br>' + out
        else:
            ret = failed() + '</br>' + out
        return raw(ret)
    return raw(failed())

with tbody:
    caption = caption(ATTACK_NAME)
    header_row = tr()
    for stage in columns:
        header_row += th(stage)
    for card_name in 'ABCDEFGHI':
        desc = {
            'card-name': card_name,
            'attack-name': ATTACK_NAME,
        }

        last_attack_id = commands.find_one(
            filter=desc,
            sort=[('timestamp', pymongo.DESCENDING)]
        )['attack-id']

        row = tr()
        for stage in columns:
            if stage == CARD_NAME:
                row += td(card_name)
            elif stage == INSTALL:
                obj = commands.find_one({
                    'card-name': card_name,
                    'attack-id':last_attack_id,
                    'stage': INSTALL,
                })
                row += td(get_install_result(obj))
            elif stage == READ:
                obj = commands.find_one({
                    'card-name': card_name,
                    'attack-id':last_attack_id,
                    'stage': READ,
                })
                row += td(get_read_result(obj))
            elif stage == UNINSTALL:
                obj = commands.find_one({
                    'card-name': card_name,
                    'attack-id':last_attack_id,
                    'stage': UNINSTALL,
                })
                row += td(get_uninstall_result(obj))

print(doc.render())
