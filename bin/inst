#!/usr/bin/env python
import logging

import bs4
import pymongo
from bs4 import BeautifulSoup

from jcvmutils.utils import CommandLineApp, MongoConnection

log = logging.getLogger(__file__)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(levelname)s:%(asctime)s:%(name)s: %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)
LOG_LEVELS = [
    logging.DEBUG, logging.INFO, logging.WARNING,
    logging.ERROR, logging.CRITICAL
]



with open('/home/qup/projects/fi/thesis/readings/java-card-docs/2.2.2/specs/jcvm/html/JCVM07instr.html', 'r') as f:

# with open('test.html', 'r') as f:
    data = f.read()

soup = BeautifulSoup(data, 'html.parser')


class App(CommandLineApp):
    def __init__(self):
        self.bytecode = None
        super().__init__()

    def add_options(self):
        super().add_options()
        self.parser.add_argument(
            '-b', '--bytecode',
            help='The name of the bytecode',
            required=True,
        )

    def parse_options(self):
        super().parse_options()
        if self.args.bytecode is not None:
            self.bytecode = self.args.bytecode

    def run(self):
        with MongoConnection(collation='bytecode-instructions') as c:
            record = c.col.find_one({'name': self.bytecode})

        self.print_record(record)


    def print_record(self, record):
        record['stack'] = ''.join(record['stack'])
        record['description'] = ''.join(record['description'])
        if not record['notes']:
            record['notes'] = ''
        else:
            record['notes'] = '\n'.join(record['notes'])

        output = '{name}\n'
        output += '{short-description}\n'
        output += '{stack}\n'
        output += 'Description\n{description}\n'
        output += 'Notes\n{notes}\n'
        print(output.format(**record).strip())


if __name__ == '__main__':
    app = App()
    app.run()
